{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","email","name","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCOCQ,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,KACnD,gCACI,6BAAKD,IACL,4BAAID,WCaLM,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMf,OACI,8BAGQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAO,cAAC,EAAD,CAAcR,GAAIK,EAAOG,GAAGR,GAAID,KAAMM,EAAOG,GAAGT,KAAMD,MAAOO,EAAOG,GAAGV,OAA5DU,SCHvBC,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBAAOA,UAAU,mCAAmCU,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCKrGI,G,MARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChB,OACG,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,SAApE,SACKJ,MCmBMK,E,kDArBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,UAAS,GAHC,E,gEAUdC,KAAKC,SAAS,CAACF,UAAS,M,+BAIxB,OAAGC,KAAKF,MAAMC,SACH,wDAEJC,KAAKH,MAAMN,a,GAlBCW,aCkEZC,E,kDAzDX,aAAc,IAAD,8BAET,gBAsBJC,eAAiB,SAACC,GAId,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAzBzC,EAAKV,MAAQ,CAGTjB,OAAO,GACPyB,YAAY,IAPP,E,gEAWQ,IAAD,OAChBG,MAAM,6CAA6C1C,MAAK,SAAA2C,GAEpD,OAAOA,EAASC,UAEnB5C,MAAK,SAAA6C,GACF,EAAKX,SAAS,CAACpB,OAAQ+B,S,+BAetB,IAAD,OAGEC,EAAiBb,KAAKF,MAAMjB,OAAOiC,QAAO,SAAAC,GAC5C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKnB,MAAMQ,YAAYU,kBAEpE,OAAIhB,KAAKF,MAAMjB,OAAOqC,OAKd,sBAAKzC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcc,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACA,cAAC,EAAD,CAAUvB,OAAQgC,WATtB,gD,GAxCFM,IAAMjB,WCHxBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B5D,M","file":"static/js/main.4972fe94.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst Card = ({email, name, id}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robot card' src={`https://robohash.org/${id}`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )   \n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    //set to true to cause the ErrorBoundry component to take over via the componentDidCatch() lifecycle hook \n    if(false){\n        throw new Error('OH NOOO')\n    }\n\n    return (\n        <div>\n            {\n                //generate cards from the list of robots with the map function.\n                robots.map((user,i) => {\n                    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange}/>\n        </div>\n\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = ({children}) => {\n return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height:'800px'}}>\n        {children}\n    </div>\n );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError:false\n        }\n\n    }\n\n    //this lifecycle hook allows react to respond to an error in a component.\n    componentDidCatch() {\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops, that's not good.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList';\n// robots import uses destructuring because. Robots import became unnecessary when switching to an online source for user data. \n//import {robots} from './robots';\nimport SearchBox from '../components/SearchBox';\n//css files do not need to be imported with a variable name!\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\n\nclass App extends React.Component {\n    constructor(){\n        //*README* use super() to generate the prototype chain and populate the 'this' keyword.\n        super()\n        this.state = {\n            //the robots file was removed as a source of users and replaced with an online resource for random users\n            //robots: robots,\n            robots:[],\n            searchfield:''   \n        }\n    }\n\n    componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users').then(response => {\n            //convert response to json\n            return response.json();\n        })\n        .then(users => {\n            this.setState({robots: users});\n        })\n        //using the old robots.js file\n        //this.setState({robots: robots})\n    }\n\n    //*README* use arrow functions instead of method declarations in order to make the 'this' keyword in the method lexically(where it is written in code) instead of dynamically(defined by whomever invokes it) bound\n    onSearchChange = (event) => {\n\n        //place the contents of the searchbox into state property 'searchfield' so that it may be compared with the list of robots to create a filtered list stored in the 'filteredRobots' constant in the render method.\n        //*README* the setState method is provided by react to prevent breaking state as a result of incongruent timing of changes to state. This makes sure all changes happen in the correct order and timing and no conflicts occur.\n        this.setState({searchfield: event.target.value});\n\n    }\n\n    render(){\n\n        //this is made possible by setting the value of the searchfield property in state via the 'onSearchChange' method.\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        if(!this.state.robots.length){\n            return (<h1>Loading...</h1>)\n        }\n        else{\n            return(\n                <div className=\"tc\">\n                    <h1 className=\"f2\">RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                        <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )   \n        }\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}